Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> deparser
Rule 1     deparser -> DPRS code
Rule 2     code -> empty
Rule 3     code -> load code
Rule 4     load -> LOAD header COMMA phv COMMA INT
Rule 5     empty -> <empty>
Rule 6     phv -> PHV shift
Rule 7     header -> HEADER shift
Rule 8     shift -> empty
Rule 9     shift -> PLUS number
Rule 10    number -> INT
Rule 11    number -> HEX

Terminals, with rules where they appear

COMMA                : 4 4
DPRS                 : 1
HEADER               : 7
HEX                  : 11
INT                  : 4 10
LOAD                 : 4
PHV                  : 6
PLUS                 : 9
error                : 

Nonterminals, with rules where they appear

code                 : 1 3
deparser             : 0
empty                : 2 8
header               : 4
load                 : 3
number               : 9
phv                  : 4
shift                : 6 7

Parsing method: LALR

state 0

    (0) S' -> . deparser
    (1) deparser -> . DPRS code

    DPRS            shift and go to state 1

    deparser                       shift and go to state 2

state 1

    (1) deparser -> DPRS . code
    (2) code -> . empty
    (3) code -> . load code
    (5) empty -> .
    (4) load -> . LOAD header COMMA phv COMMA INT

    $end            reduce using rule 5 (empty -> .)
    LOAD            shift and go to state 3

    load                           shift and go to state 4
    code                           shift and go to state 5
    empty                          shift and go to state 6

state 2

    (0) S' -> deparser .



state 3

    (4) load -> LOAD . header COMMA phv COMMA INT
    (7) header -> . HEADER shift

    HEADER          shift and go to state 7

    header                         shift and go to state 8

state 4

    (3) code -> load . code
    (2) code -> . empty
    (3) code -> . load code
    (5) empty -> .
    (4) load -> . LOAD header COMMA phv COMMA INT

    $end            reduce using rule 5 (empty -> .)
    LOAD            shift and go to state 3

    load                           shift and go to state 4
    code                           shift and go to state 9
    empty                          shift and go to state 6

state 5

    (1) deparser -> DPRS code .

    $end            reduce using rule 1 (deparser -> DPRS code .)


state 6

    (2) code -> empty .

    $end            reduce using rule 2 (code -> empty .)


state 7

    (7) header -> HEADER . shift
    (8) shift -> . empty
    (9) shift -> . PLUS number
    (5) empty -> .

    PLUS            shift and go to state 12
    COMMA           reduce using rule 5 (empty -> .)

    shift                          shift and go to state 10
    empty                          shift and go to state 11

state 8

    (4) load -> LOAD header . COMMA phv COMMA INT

    COMMA           shift and go to state 13


state 9

    (3) code -> load code .

    $end            reduce using rule 3 (code -> load code .)


state 10

    (7) header -> HEADER shift .

    COMMA           reduce using rule 7 (header -> HEADER shift .)


state 11

    (8) shift -> empty .

    COMMA           reduce using rule 8 (shift -> empty .)


state 12

    (9) shift -> PLUS . number
    (10) number -> . INT
    (11) number -> . HEX

    INT             shift and go to state 14
    HEX             shift and go to state 16

    number                         shift and go to state 15

state 13

    (4) load -> LOAD header COMMA . phv COMMA INT
    (6) phv -> . PHV shift

    PHV             shift and go to state 18

    phv                            shift and go to state 17

state 14

    (10) number -> INT .

    COMMA           reduce using rule 10 (number -> INT .)


state 15

    (9) shift -> PLUS number .

    COMMA           reduce using rule 9 (shift -> PLUS number .)


state 16

    (11) number -> HEX .

    COMMA           reduce using rule 11 (number -> HEX .)


state 17

    (4) load -> LOAD header COMMA phv . COMMA INT

    COMMA           shift and go to state 19


state 18

    (6) phv -> PHV . shift
    (8) shift -> . empty
    (9) shift -> . PLUS number
    (5) empty -> .

    PLUS            shift and go to state 12
    COMMA           reduce using rule 5 (empty -> .)

    shift                          shift and go to state 20
    empty                          shift and go to state 11

state 19

    (4) load -> LOAD header COMMA phv COMMA . INT

    INT             shift and go to state 21


state 20

    (6) phv -> PHV shift .

    COMMA           reduce using rule 6 (phv -> PHV shift .)


state 21

    (4) load -> LOAD header COMMA phv COMMA INT .

    LOAD            reduce using rule 4 (load -> LOAD header COMMA phv COMMA INT .)
    $end            reduce using rule 4 (load -> LOAD header COMMA phv COMMA INT .)

